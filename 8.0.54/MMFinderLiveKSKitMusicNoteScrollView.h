//
// ClassDump By HuangBai Private 
//  Copyright (C) 1997-2019 Steve Nygard. Updated HuangBai-2024
//

#import <UIKit/UIScrollView.h>

@class CADisplayLink, MMFinderLiveKSKitMusicNote, MMFinderLiveKSKitMusicNoteLine, MMFinderLiveKTVReporter, NSMutableArray, NSString, NSThread, UIColor;
@protocol MMLiveUniqueTaskId;

@interface MMFinderLiveKSKitMusicNoteScrollView : UIScrollView
{
    _Bool _hasVisibleNoteLine;
    _Bool _isStart;
    _Bool _singBySelf;
    _Bool _needStartAdjustDisplaylink;
    _Bool _isStartAdjustDisplaylink;
    _Bool _isPause;
    _Bool _isGoing;
    _Bool _hasDisplayKalaPosition;
    int _currMaxTimeOffset;
    int _currKalaPosition;
    int _adjustKalaPosition;
    int _currScrollKalaPosition;
    int _currInitialKalaPosition;
    double _prepareAdvanceTimeOffset;
    UIColor *_notesColor;
    CDUnknownBlockType _getNextBatchNoteListCallback;
    CDUnknownBlockType _currMusicNoteChangeCallback;
    CDUnknownBlockType _currPositionChangeCallback;
    CDUnknownBlockType _getRemoteProgressUpdateIntervalCallback;
    CDUnknownBlockType _currHasVisibleNoteChangeCallback;
    id <MMLiveUniqueTaskId> _taskId;
    NSString *_uniqueId;
    NSMutableArray *_displayMusicNoteLineList;
    MMFinderLiveKSKitMusicNoteLine *_currMusicNoteLine;
    MMFinderLiveKSKitMusicNoteLine *_lastMusicNoteLine;
    double _selfHeight;
    double _afterwardsContentOffsetX;
    double _advanceContentOffsetX;
    double _currMaxOffsetX;
    CADisplayLink *_adjustDisplayLink;
    NSThread *_displayLinkThread;
    double _currNaturalTime;
    double _adjustNaturalTime;
    double _unVisibleDistance;
    double _maxAcceptMistake;
    double _sumMaxAcceptMistake;
    unsigned long long _maxAcceptMistakeUpdateCnt;
    double _remotePositionUpdateInterval;
    double _sumPositionUpdateInterval;
    unsigned long long _positionUpdateIntervalCnt;
    double _advanceTimeOffset;
    double _lastCheckRecycleTime;
    MMFinderLiveKTVReporter *_reporter;
    unsigned long long _sumMistakeCnt;
    double _startTime;
    NSMutableArray *_mistakeRecordList;
    long long _fpsCounter;
    unsigned long long _refreshFrameCnt;
    long long _refreshFps;
    unsigned long long _refreshFpsStatCnt;
    CDUnknownBlockType _refreshFpsReport;
    unsigned long long _recvFrameCnt;
    long long _recvFps;
    unsigned long long _recvFpsStatCnt;
    CDUnknownBlockType _recvFpsReport;
}

+ (CDUnknownBlockType)createReportTimer:(long long)arg1 block:(CDUnknownBlockType)arg2;
- (void).cxx_destruct;
@property(copy) CDUnknownBlockType recvFpsReport; // @synthesize recvFpsReport=_recvFpsReport;
@property unsigned long long recvFpsStatCnt; // @synthesize recvFpsStatCnt=_recvFpsStatCnt;
@property long long recvFps; // @synthesize recvFps=_recvFps;
@property unsigned long long recvFrameCnt; // @synthesize recvFrameCnt=_recvFrameCnt;
@property(copy) CDUnknownBlockType refreshFpsReport; // @synthesize refreshFpsReport=_refreshFpsReport;
@property unsigned long long refreshFpsStatCnt; // @synthesize refreshFpsStatCnt=_refreshFpsStatCnt;
@property long long refreshFps; // @synthesize refreshFps=_refreshFps;
@property unsigned long long refreshFrameCnt; // @synthesize refreshFrameCnt=_refreshFrameCnt;
@property long long fpsCounter; // @synthesize fpsCounter=_fpsCounter;
@property(retain, nonatomic) NSMutableArray *mistakeRecordList; // @synthesize mistakeRecordList=_mistakeRecordList;
@property(nonatomic) double startTime; // @synthesize startTime=_startTime;
@property(nonatomic) unsigned long long sumMistakeCnt; // @synthesize sumMistakeCnt=_sumMistakeCnt;
@property(retain) MMFinderLiveKTVReporter *reporter; // @synthesize reporter=_reporter;
@property(nonatomic) int currInitialKalaPosition; // @synthesize currInitialKalaPosition=_currInitialKalaPosition;
@property(nonatomic) _Bool hasDisplayKalaPosition; // @synthesize hasDisplayKalaPosition=_hasDisplayKalaPosition;
@property(nonatomic) double lastCheckRecycleTime; // @synthesize lastCheckRecycleTime=_lastCheckRecycleTime;
@property(nonatomic) double advanceTimeOffset; // @synthesize advanceTimeOffset=_advanceTimeOffset;
@property(nonatomic) _Bool isGoing; // @synthesize isGoing=_isGoing;
@property(nonatomic) _Bool isPause; // @synthesize isPause=_isPause;
@property(nonatomic) unsigned long long positionUpdateIntervalCnt; // @synthesize positionUpdateIntervalCnt=_positionUpdateIntervalCnt;
@property(nonatomic) double sumPositionUpdateInterval; // @synthesize sumPositionUpdateInterval=_sumPositionUpdateInterval;
@property(nonatomic) double remotePositionUpdateInterval; // @synthesize remotePositionUpdateInterval=_remotePositionUpdateInterval;
@property(nonatomic) unsigned long long maxAcceptMistakeUpdateCnt; // @synthesize maxAcceptMistakeUpdateCnt=_maxAcceptMistakeUpdateCnt;
@property(nonatomic) double sumMaxAcceptMistake; // @synthesize sumMaxAcceptMistake=_sumMaxAcceptMistake;
@property(nonatomic) double maxAcceptMistake; // @synthesize maxAcceptMistake=_maxAcceptMistake;
@property(nonatomic) double unVisibleDistance; // @synthesize unVisibleDistance=_unVisibleDistance;
@property(nonatomic) int currScrollKalaPosition; // @synthesize currScrollKalaPosition=_currScrollKalaPosition;
@property(nonatomic) int adjustKalaPosition; // @synthesize adjustKalaPosition=_adjustKalaPosition;
@property(nonatomic) double adjustNaturalTime; // @synthesize adjustNaturalTime=_adjustNaturalTime;
@property(nonatomic) int currKalaPosition; // @synthesize currKalaPosition=_currKalaPosition;
@property(nonatomic) double currNaturalTime; // @synthesize currNaturalTime=_currNaturalTime;
@property(retain, nonatomic) NSThread *displayLinkThread; // @synthesize displayLinkThread=_displayLinkThread;
@property(retain, nonatomic) CADisplayLink *adjustDisplayLink; // @synthesize adjustDisplayLink=_adjustDisplayLink;
@property(nonatomic) _Bool isStartAdjustDisplaylink; // @synthesize isStartAdjustDisplaylink=_isStartAdjustDisplaylink;
@property(nonatomic) _Bool needStartAdjustDisplaylink; // @synthesize needStartAdjustDisplaylink=_needStartAdjustDisplaylink;
@property(nonatomic) int currMaxTimeOffset; // @synthesize currMaxTimeOffset=_currMaxTimeOffset;
@property(nonatomic) double currMaxOffsetX; // @synthesize currMaxOffsetX=_currMaxOffsetX;
@property(nonatomic) double advanceContentOffsetX; // @synthesize advanceContentOffsetX=_advanceContentOffsetX;
@property(nonatomic) double afterwardsContentOffsetX; // @synthesize afterwardsContentOffsetX=_afterwardsContentOffsetX;
@property(nonatomic) double selfHeight; // @synthesize selfHeight=_selfHeight;
@property(retain) MMFinderLiveKSKitMusicNoteLine *lastMusicNoteLine; // @synthesize lastMusicNoteLine=_lastMusicNoteLine;
@property(retain) MMFinderLiveKSKitMusicNoteLine *currMusicNoteLine; // @synthesize currMusicNoteLine=_currMusicNoteLine;
@property(retain, nonatomic) NSMutableArray *displayMusicNoteLineList; // @synthesize displayMusicNoteLineList=_displayMusicNoteLineList;
@property(retain, nonatomic) NSString *uniqueId; // @synthesize uniqueId=_uniqueId;
@property(nonatomic) _Bool singBySelf; // @synthesize singBySelf=_singBySelf;
@property(nonatomic) _Bool isStart; // @synthesize isStart=_isStart;
@property(retain, nonatomic) id <MMLiveUniqueTaskId> taskId; // @synthesize taskId=_taskId;
@property(copy, nonatomic) CDUnknownBlockType currHasVisibleNoteChangeCallback; // @synthesize currHasVisibleNoteChangeCallback=_currHasVisibleNoteChangeCallback;
@property(copy, nonatomic) CDUnknownBlockType getRemoteProgressUpdateIntervalCallback; // @synthesize getRemoteProgressUpdateIntervalCallback=_getRemoteProgressUpdateIntervalCallback;
@property(copy, nonatomic) CDUnknownBlockType currPositionChangeCallback; // @synthesize currPositionChangeCallback=_currPositionChangeCallback;
@property(copy, nonatomic) CDUnknownBlockType currMusicNoteChangeCallback; // @synthesize currMusicNoteChangeCallback=_currMusicNoteChangeCallback;
@property(copy, nonatomic) CDUnknownBlockType getNextBatchNoteListCallback; // @synthesize getNextBatchNoteListCallback=_getNextBatchNoteListCallback;
@property _Bool hasVisibleNoteLine; // @synthesize hasVisibleNoteLine=_hasVisibleNoteLine;
@property(retain, nonatomic) UIColor *notesColor; // @synthesize notesColor=_notesColor;
@property(nonatomic) double prepareAdvanceTimeOffset; // @synthesize prepareAdvanceTimeOffset=_prepareAdvanceTimeOffset;
- (void)setContentOffset:(struct CGPoint)arg1;
- (void)clearMistakeRecords;
- (id)getMiddleMistakeRecords:(unsigned long long)arg1;
- (void)addMistakeRecord:(id)arg1;
- (id)getNoteLineForKalaPosition:(int)arg1;
- (void)checkAdjustDisplayLinkState;
- (void)updateNeedStartAdjustDisplaylink:(_Bool)arg1;
- (void)checkDisplayMusicNoteLineListEmpty;
- (void)updateHasVisibleNoteLine:(_Bool)arg1;
- (void)checkHasVisibleNoteLine;
- (void)checkMusicNoteLinesUnVisible;
- (id)getUnVisibleNoteLineList;
- (void)recycleUnVisibleNoteLines:(id)arg1;
- (_Bool)checkNeedRecycleUnVisibleNoteLines;
- (void)clearDatas;
- (void)addNextBatchMusicNoteLines;
- (id)getNextBatchMusicNoteLineList;
- (id)getNextBatchMusicNoteList;
- (id)ktvReporter;
@property(readonly, nonatomic) int maxRefreshFPS;
@property(readonly, nonatomic) MMFinderLiveKSKitMusicNote *currMusicNote;
- (void)reportMistakeRecords;
- (void)checkKalaPositionHasDisplay;
- (void)updateGoingState:(_Bool)arg1;
- (void)interruptProgress;
- (void)checkProgressChanged:(int)arg1;
- (void)notifyProgressRefresh:(long long)arg1;
- (void)updateCurrScrollKalaPosition:(int)arg1;
- (void)updatePrepareAdvanceTimeOffset;
- (void)clearAdjustDatas;
- (void)cancelAdjustDisplaylink;
- (void)onPositionMistakeOccur:(int)arg1;
- (void)scheduleToAdjustKalaPosition;
- (void)onAdjustDisplaylink:(id)arg1;
- (void)activeAdjustDisplayLink;
- (void)startAdjustDisplayLinkInSpecificThread;
- (void)startAdjustDisplayLink;
- (void)adjustTimeOffset:(int)arg1;
- (void)scrollToTimeOffset:(int)arg1;
- (id)tryGetNextMusicNoteLineWithPosition:(int)arg1;
- (id)tryGetMusicNoteLineWithPosition:(int)arg1;
- (void)checkCurrMusicNoteLineChangeWithPosition:(int)arg1;
- (void)updateAdjustKalaPosition:(int)arg1 naturalTime:(double)arg2;
- (_Bool)adjustCurrPositionIfNeed:(int)arg1;
- (void)resetAllDisplayNoteLinesOriginY;
- (void)resetAllDisplayNoteLinesOriginX;
- (void)updateCurrMaxOffsetX:(double)arg1;
- (void)resetMaxTimeAndXOffset;
- (void)updateMaxTimeAndXOffset;
- (void)updateContentSize;
- (void)updateNoteLineOrigin:(id)arg1;
- (void)addMusicNotLine:(id)arg1;
- (double)getRemoteProgressUpdateInterval;
- (void)synchronizeCurrKTVState:(id)arg1;
- (int)getCurrScrollKalaPosition;
- (unsigned long long)currProgressRefreshFPS;
- (double)getAdvanceTimeOffset;
- (void)updateMaxAcceptMistake:(double)arg1;
- (void)updateRemoteMaxAcceptMistake;
- (double)getNotePositionTopOffset;
- (double)getNotePositionContentHeight;
- (void)resume;
- (void)pause;
- (void)onNotifyTimeToPrepareNextBatchMusicNotes;
- (void)onKalaVoiceReachNoteHeight:(float)arg1 noteValue:(float)arg2 timeOffset:(int)arg3 duration:(int)arg4 hit:(_Bool)arg5 hitNote:(id *)arg6;
- (void)notifyProgressRefreshInOuterDriveModeIfNeed;
- (void)onKalaPositionChanged:(int)arg1 preAdjust:(int)arg2;
- (void)resetScrollState:(_Bool)arg1;
- (void)stop;
- (void)startBySelf:(_Bool)arg1 uniqueId:(id)arg2;
- (void)updateAdvanceContentOffsetX:(double)arg1;
- (void)updateAfterwardsContentOffsetX:(double)arg1;
- (_Bool)checkSelfHeightChanged;
- (void)layoutSubviews;
- (void)initDefaultDatas;
- (void)initDefaultUI;
- (void)dealloc;
- (id)initWithTaskId:(id)arg1;
- (double)maxRefreshTimeInterval;
- (long long)getFrameInterval:(long long)arg1;
- (void)clearFPSControl;
- (_Bool)checkNeedSkipRefreshFrame:(long long)arg1;
- (void)logForRecvStatIfNeed;
- (void)increaseRecvFpsStatCnt;
- (void)increaseRecvFrameCnt;
- (void)logForRefreshStatIfNeed;
- (void)increaseRefreshFpsStatCnt;
- (void)increaseRefreshFrameCnt;
- (CDUnknownBlockType)createRecvFpsReporter;
- (CDUnknownBlockType)createRefreshFpsReporter;
- (void)clearRecvStats;
- (void)updateRecvStats;
- (void)initRecvStats;
- (void)clearRefreshStats;
- (void)updateRefreshStats;
- (void)initRefreshStats;

@end

