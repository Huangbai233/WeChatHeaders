//
// ClassDump By HuangBai Private
//  Copyright (C) 1997-2019 Steve Nygard. Updated HuangBai-2024 
//

@class AVAudioPlayer, AVAudioRouteManager, AVVideoDevice, MMTimer, MMViewCapture, MinimizeTaskData, MultiTalkMainViewController, MultiTalkWindow, MultitalkMiniInAppView, NSArray, NSMutableDictionary, NSRecursiveLock, NSString, RingBackSoundCoordinator, SafeMutableDictionary, VoipCheckAudioDeviceObj;

@interface MultiTalkMgr
{
    char *cameraBuf;
    int cameraBufSize;
    _Bool _isMicrophoneOn;
    _Bool _isSpeakerEnabled;
    _Bool _isSpeakerOn;
    _Bool _isCameraEnabled;
    _Bool _isCameraOn;
    _Bool _m_videoDeviceRunning;
    _Bool _m_multiTalkReady;
    _Bool _m_isCalling;
    _Bool _m_deviceLaunchSuccess;
    _Bool _ilinkTalkReady;
    _Bool _isCameraSwitchingOn;
    _Bool _isScreenOn;
    _Bool _isScreenSwitchingOn;
    _Bool _isScreenSharingTransition;
    _Bool _isScreenPause;
    _Bool _m_blockDisplayVideo;
    _Bool _m_useLowQualityVideo;
    _Bool _m_haveBigVideoSubscriber;
    _Bool _isMinimizeMode;
    _Bool _hasSetVirtualBackground;
    unsigned int m_mUIInterruptCnt;
    unsigned int _currentMessageId;
    unsigned int _m_uploadFpsCount;
    unsigned int _m_nextCanJoinTalkTime;
    unsigned int _m_nextCanCreateTalkTime;
    int _lastSubscribeScreenMemberID;
    unsigned int _m_nextCanOpenCameraTime;
    unsigned int _nextEnableTimeForCreateRoom;
    unsigned int _nextEnableTimeForOpenCamera;
    MultiTalkWindow *m_mainWindow;
    unsigned long long m_mUIInterruptEndTime;
    unsigned long long m_mUIInterruptBeginTime;
    unsigned long long m_mTalkViewStartTime;
    AVVideoDevice *_m_videoDevice;
    SafeMutableDictionary *_m_renderDic;
    SafeMutableDictionary *_m_videoInfoDic;
    AVAudioPlayer *_m_audioPlayer;
    RingBackSoundCoordinator *_ringCoordinator;
    NSMutableDictionary *_memberInfoMutableDictionrary;
    MMViewCapture *_viewCapture;
    long long _lastOrientationFromViewCapture;
    NSMutableDictionary *_validatingScreenSharingMapping;
    MMTimer *_m_uploadFpsTimer;
    NSMutableDictionary *_m_bannerInfoList;
    NSString *_m_talkingGroupId;
    NSMutableDictionary *_m_lastBannerTsList;
    NSMutableDictionary *_m_invitedFlagList;
    NSString *_m_lastSubscribeName;
    NSString *_lastSubscribeScreenUserName;
    MinimizeTaskData *_minimizeTaskData;
    MultitalkMiniInAppView *_minimizeView;
    VoipCheckAudioDeviceObj *_checkAudioDeviceObj;
    MultiTalkMainViewController *_mainViewController;
    NSRecursiveLock *_m_videoEncLock;
    NSString *_reportVirtualBackgroundData;
    NSString *_reportVirtualBackgroundHeader;
    CDUnknownBlockType _resumeAfterInterruptionBlock;
    AVAudioRouteManager *_audioRouteMgr;
    CDUnknownBlockType _queryTalkingMembersBlock;
    NSArray *_currentTalkingInfos;
}

- (void).cxx_destruct;
@property(retain, nonatomic) NSArray *currentTalkingInfos; // @synthesize currentTalkingInfos=_currentTalkingInfos;
@property(copy, nonatomic) CDUnknownBlockType queryTalkingMembersBlock; // @synthesize queryTalkingMembersBlock=_queryTalkingMembersBlock;
@property(retain, nonatomic) AVAudioRouteManager *audioRouteMgr; // @synthesize audioRouteMgr=_audioRouteMgr;
@property(copy, nonatomic) CDUnknownBlockType resumeAfterInterruptionBlock; // @synthesize resumeAfterInterruptionBlock=_resumeAfterInterruptionBlock;
@property(retain, nonatomic) NSString *reportVirtualBackgroundHeader; // @synthesize reportVirtualBackgroundHeader=_reportVirtualBackgroundHeader;
@property(nonatomic) _Bool hasSetVirtualBackground; // @synthesize hasSetVirtualBackground=_hasSetVirtualBackground;
@property(retain, nonatomic) NSString *reportVirtualBackgroundData; // @synthesize reportVirtualBackgroundData=_reportVirtualBackgroundData;
@property(nonatomic) unsigned int nextEnableTimeForOpenCamera; // @synthesize nextEnableTimeForOpenCamera=_nextEnableTimeForOpenCamera;
@property(nonatomic) unsigned int nextEnableTimeForCreateRoom; // @synthesize nextEnableTimeForCreateRoom=_nextEnableTimeForCreateRoom;
@property(retain, nonatomic) NSRecursiveLock *m_videoEncLock; // @synthesize m_videoEncLock=_m_videoEncLock;
@property(nonatomic) __weak MultiTalkMainViewController *mainViewController; // @synthesize mainViewController=_mainViewController;
@property(retain, nonatomic) VoipCheckAudioDeviceObj *checkAudioDeviceObj; // @synthesize checkAudioDeviceObj=_checkAudioDeviceObj;
@property(nonatomic) _Bool isMinimizeMode; // @synthesize isMinimizeMode=_isMinimizeMode;
@property(retain, nonatomic) MultitalkMiniInAppView *minimizeView; // @synthesize minimizeView=_minimizeView;
@property(retain, nonatomic) MinimizeTaskData *minimizeTaskData; // @synthesize minimizeTaskData=_minimizeTaskData;
@property(nonatomic) unsigned int m_nextCanOpenCameraTime; // @synthesize m_nextCanOpenCameraTime=_m_nextCanOpenCameraTime;
@property(nonatomic) int lastSubscribeScreenMemberID; // @synthesize lastSubscribeScreenMemberID=_lastSubscribeScreenMemberID;
@property(copy, nonatomic) NSString *lastSubscribeScreenUserName; // @synthesize lastSubscribeScreenUserName=_lastSubscribeScreenUserName;
@property(retain, nonatomic) NSString *m_lastSubscribeName; // @synthesize m_lastSubscribeName=_m_lastSubscribeName;
@property(nonatomic) _Bool m_haveBigVideoSubscriber; // @synthesize m_haveBigVideoSubscriber=_m_haveBigVideoSubscriber;
@property(nonatomic) unsigned int m_nextCanCreateTalkTime; // @synthesize m_nextCanCreateTalkTime=_m_nextCanCreateTalkTime;
@property(nonatomic) unsigned int m_nextCanJoinTalkTime; // @synthesize m_nextCanJoinTalkTime=_m_nextCanJoinTalkTime;
@property(retain, nonatomic) NSMutableDictionary *m_invitedFlagList; // @synthesize m_invitedFlagList=_m_invitedFlagList;
@property(retain, nonatomic) NSMutableDictionary *m_lastBannerTsList; // @synthesize m_lastBannerTsList=_m_lastBannerTsList;
@property(retain, nonatomic) NSString *m_talkingGroupId; // @synthesize m_talkingGroupId=_m_talkingGroupId;
@property(retain, nonatomic) NSMutableDictionary *m_bannerInfoList; // @synthesize m_bannerInfoList=_m_bannerInfoList;
@property(nonatomic) _Bool m_useLowQualityVideo; // @synthesize m_useLowQualityVideo=_m_useLowQualityVideo;
@property(nonatomic) _Bool m_blockDisplayVideo; // @synthesize m_blockDisplayVideo=_m_blockDisplayVideo;
@property(retain, nonatomic) MMTimer *m_uploadFpsTimer; // @synthesize m_uploadFpsTimer=_m_uploadFpsTimer;
@property(nonatomic) unsigned int m_uploadFpsCount; // @synthesize m_uploadFpsCount=_m_uploadFpsCount;
@property(retain, nonatomic) NSMutableDictionary *validatingScreenSharingMapping; // @synthesize validatingScreenSharingMapping=_validatingScreenSharingMapping;
@property(nonatomic) _Bool isScreenPause; // @synthesize isScreenPause=_isScreenPause;
@property(nonatomic) _Bool isScreenSharingTransition; // @synthesize isScreenSharingTransition=_isScreenSharingTransition;
@property(nonatomic) _Bool isScreenSwitchingOn; // @synthesize isScreenSwitchingOn=_isScreenSwitchingOn;
@property(nonatomic) _Bool isScreenOn; // @synthesize isScreenOn=_isScreenOn;
@property(nonatomic) _Bool isCameraSwitchingOn; // @synthesize isCameraSwitchingOn=_isCameraSwitchingOn;
@property(nonatomic) _Bool ilinkTalkReady; // @synthesize ilinkTalkReady=_ilinkTalkReady;
@property(nonatomic) _Bool m_deviceLaunchSuccess; // @synthesize m_deviceLaunchSuccess=_m_deviceLaunchSuccess;
@property(nonatomic) _Bool m_isCalling; // @synthesize m_isCalling=_m_isCalling;
@property(nonatomic) _Bool m_multiTalkReady; // @synthesize m_multiTalkReady=_m_multiTalkReady;
@property(nonatomic) unsigned int currentMessageId; // @synthesize currentMessageId=_currentMessageId;
@property(nonatomic) long long lastOrientationFromViewCapture; // @synthesize lastOrientationFromViewCapture=_lastOrientationFromViewCapture;
@property(retain, nonatomic) MMViewCapture *viewCapture; // @synthesize viewCapture=_viewCapture;
@property(retain, nonatomic) NSMutableDictionary *memberInfoMutableDictionrary; // @synthesize memberInfoMutableDictionrary=_memberInfoMutableDictionrary;
@property(retain, nonatomic) RingBackSoundCoordinator *ringCoordinator; // @synthesize ringCoordinator=_ringCoordinator;
@property(retain, nonatomic) AVAudioPlayer *m_audioPlayer; // @synthesize m_audioPlayer=_m_audioPlayer;
@property(nonatomic) _Bool m_videoDeviceRunning; // @synthesize m_videoDeviceRunning=_m_videoDeviceRunning;
@property(retain, nonatomic) SafeMutableDictionary *m_videoInfoDic; // @synthesize m_videoInfoDic=_m_videoInfoDic;
@property(retain, nonatomic) SafeMutableDictionary *m_renderDic; // @synthesize m_renderDic=_m_renderDic;
@property(retain, nonatomic) AVVideoDevice *m_videoDevice; // @synthesize m_videoDevice=_m_videoDevice;
@property(nonatomic) _Bool isCameraOn; // @synthesize isCameraOn=_isCameraOn;
@property(nonatomic) _Bool isCameraEnabled; // @synthesize isCameraEnabled=_isCameraEnabled;
@property(nonatomic) _Bool isSpeakerOn; // @synthesize isSpeakerOn=_isSpeakerOn;
@property(nonatomic) _Bool isSpeakerEnabled; // @synthesize isSpeakerEnabled=_isSpeakerEnabled;
@property(nonatomic) _Bool isMicrophoneOn; // @synthesize isMicrophoneOn=_isMicrophoneOn;
@property(nonatomic) unsigned long long m_mTalkViewStartTime; // @synthesize m_mTalkViewStartTime;
@property(nonatomic) unsigned int m_mUIInterruptCnt; // @synthesize m_mUIInterruptCnt;
@property(nonatomic) unsigned long long m_mUIInterruptBeginTime; // @synthesize m_mUIInterruptBeginTime;
@property(nonatomic) unsigned long long m_mUIInterruptEndTime; // @synthesize m_mUIInterruptEndTime;
@property(retain, nonatomic) MultiTalkWindow *m_mainWindow; // @synthesize m_mainWindow;
- (void)notifyAudioDeviceChange;
- (void)updateSpeakerButtonStatus:(id)arg1 hasExtenalOutput:(_Bool)arg2;
- (void)updatePortWithReasonValue:(unsigned long long)arg1 prevPort:(id)arg2;
- (void)multiTalkAudioDeviceStartedSuccess;
- (void)multiTalkRestartDeviceForFail;
- (void)changeAudioToPort:(id)arg1 hasChanged:(_Bool)arg2;
- (id)getSpeakerBtnText:(id)arg1;
- (id)curOutputPort;
- (_Bool)hasExtenalOutput;
- (id)settingPortType;
- (void)hangupMultiTalkByCallEnd;
- (void)showToastOnMultiTalkVC:(id)arg1;
- (void)onIlinkChangeToMultiTalk:(id)arg1 confSDKMemberMgr:(id)arg2 isMicMute:(_Bool)arg3 isSpeakerOn:(_Bool)arg4 localVideoClosed:(_Bool)arg5 remoteVideoClosed:(_Bool)arg6;
- (void)onIlinkInviteMultiTalk:(id)arg1;
- (_Bool)isCameraFront;
- (void)ilinkDidEnd;
- (void)receiverCanStartCamera;
- (void)receiverOpenUIAfterAckSuccess:(_Bool)arg1;
- (_Bool)getIfThisTalkIlink;
- (int)ilinkDoCreateMultiTalk:(id)arg1 isAudio:(_Bool)arg2;
- (void)addReportVirtualBackgroundData:(id)arg1;
- (void)setVirtualBackground:(_Bool)arg1 isFront:(_Bool)arg2;
- (void)reportVirtualBackgroundWithtimeStamp:(id)arg1 endCall:(_Bool)arg2;
- (void)videoDevice:(id)arg1 updateFilterSetting:(id)arg2 fromABTest:(_Bool)arg3;
- (unsigned long long)getTalkViewStartTime;
- (unsigned int)getInterrupCnt;
- (unsigned long long)getInterrupBeginTimeStamp;
- (unsigned long long)getInterrupEndTimeStamp;
- (void)notifyWithData:(id)arg1;
- (void)reportMultiTalkVoipIncomingCallLogWithActionCode:(unsigned int)arg1;
- (int)valueFromScreenSharingOrientation:(long long)arg1;
- (void)didCaptureViewWithVideoBuffer:(struct CGContext *)arg1 orientation:(long long)arg2;
- (void)viewCapture:(id)arg1 didCaptureImageContext:(struct CGContext *)arg2 orientation:(long long)arg3;
- (void)resumeViewCapture;
- (void)pauseViewCapture;
- (void)stopViewCapture;
- (void)startViewCaptureWithView:(id)arg1;
- (void)clearViewCapture;
- (void)renewViewCapture;
- (void)onContainerSizeDidChange:(id)arg1 fromSize:(struct CGSize)arg2 toSize:(struct CGSize)arg3;
- (_Bool)onEnterMinimizedTask:(id)arg1 openContext:(id)arg2 taskEnterScene:(unsigned int)arg3;
- (void)updateMinimizeViewFromSize:(struct CGSize)arg1 toSize:(struct CGSize)arg2;
- (id)getMultiTalkMinimizeView;
- (void)createMinimizeView;
- (id)getMinimizeTaskKey;
- (id)getMinimizeTaskData;
- (unsigned long long)getCurrentRoomID;
- (unsigned long long)getCurrentRoomKey;
- (id)getCurrentRoomBanner;
- (void)onModifyContact:(id)arg1;
- (void)OnQuitGroup:(id)arg1;
- (void)quitMultiTalkAndClearBannerInfoWithGroupName:(id)arg1;
- (_Bool)isMultiTalkMinimized;
- (id)getCurrentTalkingGroupId;
- (void)loadMultiTalkBannerInfoList;
- (id)getMultiTalkBannerItemWithGroupId:(id)arg1;
- (_Bool)deleteMultiTalkBannerItemWithGroupId:(id)arg1;
- (_Bool)insertMultiTalkBannerItem:(id)arg1;
- (void)showMultiTalkBanner:(_Bool)arg1 group:(id)arg2 roomId:(unsigned long long)arg3 roomKey:(unsigned long long)arg4;
- (void)onReceiveVoIPPushInfo:(id)arg1;
- (_Bool)onMonoServiceMsgHoldWithMsg:(id)arg1;
- (_Bool)onMonoServiceMsgCancelWithMsg:(id)arg1;
- (_Bool)onMonoServiceMsgRejectWithMsg:(id)arg1;
- (void)_onMonoServiceMsgStartWithMsg:(id)arg1;
- (void)onMonoServiceMsgStartWithMsg:(id)arg1;
- (_Bool)isMonoServiceCheckingServer;
- (_Bool)isMonoServiceUIWorking;
- (_Bool)isMonoServiceUIExist;
- (void)audioModuleDidRemoveFromInterruptList:(id)arg1;
- (void)audioModuleInterruptionEnd:(id)arg1 param:(id)arg2;
- (void)audioModuleInterruptionBegin:(id)arg1 param:(id)arg2;
- (void)onSimCardNetTypeChange;
- (void)ReachabilityChange:(unsigned int)arg1;
- (void)updateNetworkTacticsWithNotify:(_Bool)arg1;
- (_Bool)checkLowNetworkWithNotify:(_Bool)arg1;
- (_Bool)checkHighWWanWithNotify:(_Bool)arg1;
- (_Bool)checkWiFiWithNotify:(_Bool)arg1;
- (_Bool)checkUnReachableWithNotify:(_Bool)arg1;
- (_Bool)isLowNetwork;
- (int)GetFrmType;
- (int)VideoDevPutData:(int)arg1 frmData:(char *)arg2 frmIndex:(unsigned long long)arg3 imageWidth:(unsigned int)arg4 imageHeight:(unsigned int)arg5 rgbaTexture:(id)arg6;
- (void)videoDevice:(id)arg1 didOutputPixelBuffer:(struct __CVBuffer *)arg2;
- (void)videoDevice:(id)arg1 didChangeRotation:(int)arg2;
- (void)videoDeviceCameraBack:(id)arg1;
- (void)videoDeviceCameraFront:(id)arg1;
- (void)onVideoSessionStopComplete;
- (void)onVideoSessionRecvFirstFrame;
- (void)onVideoSessionStartComplete;
- (unsigned long long)getStartTalkingTime;
- (id)getLowVersionMembers;
- (void)onMultiTalkMainViewControllerHoldMultiTalkAudio;
- (void)onMultiTalkMainViewControllerResumeMultiTalkAudio;
- (void)onMultiTalkMainViewControllerRecoverVideoOn:(_Bool)arg1 screenStatus:(unsigned int)arg2;
- (void)onMultiTalkMainViewControllerCloseVideoSendAndRecv;
- (void)onMultiTalkMainViewControllerResubscribe;
- (void)onMultiTalkMainViewControllerFlipCamera;
- (_Bool)onMultiTalkMainViewControllerShouldBlockReceiveVideo;
- (_Bool)onMultiTalkMainViewControllerRequestLocalVideoDeviceStatus;
- (void)onMultiTalkMainViewControllerAddNewMemberArray:(id)arg1 withGroup:(id)arg2;
- (void)onMultiTalkMainViewControllerScreenSharingPresentationDidTransition;
- (void)onMultiTalkMainViewControllerScreenSharingPresentationWillTransition;
- (unsigned int)getShareScreenStatus;
- (void)onMultiTalkMainViewControllerScreenSharingDidResume;
- (void)onMultiTalkMainViewControllerScreenSharingDidPause;
- (void)onMultiTalkMainViewControllerScreenSharingDidStop;
- (void)onMultiTalkMainViewControllerScreenSharingDidStartWithView:(id)arg1;
- (void)onMultiTalkMainViewControllerVideoSelected:(_Bool)arg1;
- (void)closeLocalCameraForServerEnableWithInterval:(int)arg1;
- (void)onMultiTalkMainViewControllerClickedCollapseButtonWithNotAnimation;
- (void)onMultiTalkMainViewControllerSlipToCollapse:(id)arg1;
- (void)onMultiTalkMainViewControllerClickedCollapseButton;
- (void)onMultiTalkMainViewControllerMicButtonSeclect:(_Bool)arg1;
- (void)onMultiTalkMainViewControllerSpeakerButtonSeclect:(_Bool)arg1;
- (void)onMultiTalkMainViewControllerCancelJoinWithGroup:(id)arg1;
- (void)onMultiTalkMainViewControllerReceiveTimeOutWithGroup:(id)arg1;
- (void)onMultiTalkMainViewControllerRejectWithGroup:(id)arg1;
- (void)onMultiTalkMainViewControllerAcceptWithGroup:(id)arg1;
- (void)onMultiTalkMainViewControllerHangupWithGroup:(id)arg1 isClickHangup:(_Bool)arg2 isNewIlink:(_Bool)arg3 isInviterQuitEarly:(_Bool)arg4;
- (void)onMultiTalkMainViewControllerReceiveCancelCall:(id)arg1;
- (void)onMultiTalkMainViewControllerUpdateMessageWith:(id)arg1 duration:(unsigned int)arg2 messageId:(unsigned int)arg3;
- (void)onMultiTalkTipsViewResumeMainWindowFromBanner;
- (void)onMultiTalkMainViewControllerExtendFromCollapseAnimationDidEnd;
- (void)onMultiTalkMainViewControllerCollapseAnimationWillStart;
- (void)onMultiTalkMainViewControllerViewDidAppear;
- (void)onMultiTalkMainViewControllerExtendFromCollapseAnimationWillStart;
- (void)onMultiTalkMainViewControllerCollapseAnimationDidEnd;
- (void)clearMultiTalkStatus;
- (void)onMultiTalkMainViewControllerOpenCameraByInterrupt;
- (void)onMultiTalkMainViewControllerCloseCameraByInterrupt;
- (void)onMultiTalkMainViewControllerQuitAnimationDidEnd;
- (void)onMultiTalkMainViewControllerQuitAnimationWillStart;
- (struct CGRect)onMultiTalkMainViewControllerRequestMinimizeFrame;
- (const char *)notifyCancelInviteString;
- (const char *)notFriendNotify;
- (const char *)notifyBannerString;
- (const char *)notifyDataString;
- (const char *)notifyInviteString;
- (void)OnGetNewXmlMsg:(id)arg1 Type:(id)arg2 MsgWrap:(id)arg3;
- (id)getMultiTalkUserNameListWithPrivacy:(id)arg1;
- (void)onMultiTalkBannerChange:(id)arg1 WxGroupId:(id)arg2;
- (void)onMultiTalkBannerChange:(id)arg1;
- (void)onOtherDeviceHandleTalk:(id)arg1;
- (void)onDoScreenSharingSecurityCheck:(int)arg1 checkStatus:(int)arg2 fileMd5:(id)arg3;
- (void)onSetMultiTalkScreenSharingStatus:(int)arg1 ScreenSharingStatus:(int)arg2;
- (void)onMultiTalkNotAllowCameraLimit:(unsigned int)arg1;
- (void)onMultiTalkCreateLimit:(unsigned int)arg1;
- (void)onMultiTalkJoinLimit:(unsigned int)arg1;
- (void)onMultiTalkRedirectOk;
- (void)onVideoData:(unsigned int)arg1 Bgra:(char *)arg2 Width:(unsigned int)arg3 Height:(unsigned int)arg4 frontCamera:(_Bool)arg5 screenData:(_Bool)arg6 format:(int)arg7;
- (void)onVideoData:(unsigned int)arg1 Bgra:(char *)arg2 Width:(unsigned int)arg3 Height:(unsigned int)arg4 frontCamera:(_Bool)arg5 screenData:(_Bool)arg6;
- (long long)getRemoteVideoOrientation:(int)arg1;
- (void)OnVideoStateChange:(_Bool)arg1 VideoOn:(_Bool)arg2;
- (void)onReceiveVideoMemberChangeMsg:(id)arg1 extArray:(id)arg2;
- (void)onReceiveSubscribeMemberChangeMsg:(int)arg1;
- (void)onMultiTalkDeviceLauchSuccess;
- (void)onReceiveMutilTalkPokerMsg;
- (void)OnSysCallNotifyInterrupt:(int)arg1;
- (void)onAddMultiTalkMemberFailedDueToRiskWithUserNames:(id)arg1 groupInfo:(id)arg2 isAll:(_Bool)arg3;
- (void)onAddMultiTalkMemberFailedDueToCallerRisk;
- (void)onAddMultiTalkMemberResult:(_Bool)arg1 errorType:(int)arg2 groupInfo:(id)arg3;
- (void)onRejectToOpenCameraForServerOverloadWithTimeInterval:(int)arg1;
- (void)onRejectToCreateRoomForServerOverloadWithTimeInterval:(int)arg1;
- (void)onReceiveConfCallWordingInfo:(id)arg1;
- (void)onCreateUnsafelyDueToCalleeRiskWithUserNames:(id)arg1 isAll:(_Bool)arg2;
- (void)onJoinFailedDueToCallerRisk;
- (void)onCreateFailedDueToRequireVerification:(id)arg1;
- (void)onCreateFailedDueToCallerRisk;
- (void)onErr:(int)arg1 groupUserName:(id)arg2;
- (void)onSpeakerStateChange:(_Bool)arg1;
- (void)onMuteStateChange:(_Bool)arg1;
- (void)onMultiTalkReady;
- (void)onMemberChange:(id)arg1 withNewJoinedMembers:(id)arg2;
- (void)onMemberChange:(id)arg1;
- (void)onReceiveMissMultiTalk:(id)arg1;
- (void)confSDKOnRecvCmdMsg:(id)arg1;
- (void)onInviteOrAcceptTimeout:(id)arg1;
- (void)onEnterMultiTalk:(id)arg1;
- (void)onCreateMultiTalk:(id)arg1;
- (void)onCancelCreateMultiTalk:(id)arg1;
- (void)onInviteMultiTalk:(id)arg1;
- (int)inviteUserType:(id)arg1;
- (void)stopRingSound;
- (void)playRingSoundWithVibration:(_Bool)arg1 isCaller:(_Bool)arg2;
- (void)playWhenEnterForeground;
- (void)rejectCall:(id)arg1;
- (void)writeLog:(int)arg1 tag:(id)arg2 content:(id)arg3;
- (void)onPreQuit;
- (void)onAuthOK;
- (void)_handleValidateScreenSharingFileWithMD5:(id)arg1 ret:(int)arg2 fileStatus:(int)arg3;
- (void)_validateScreenSharingFileWithPath:(id)arg1 MD5:(id)arg2;
- (_Bool)validateScreenSharingFileWithPath:(id)arg1;
@property(readonly, nonatomic) _Bool canDoodleWhenShareScreen;
@property(readonly, nonatomic) _Bool canShareScreen;
- (void)showlocalNetworkBadTips;
- (void)setSpeakerState:(_Bool)arg1;
- (void)setMicrophoneState:(_Bool)arg1;
- (unsigned long long)maxMultiTalkMemberCount;
- (void)createMultiTalkWithContacts:(id)arg1 withChatroomUsername:(id)arg2;
- (id)getMultiTalkWindow;
- (void)doCreateMultiTalkWithContacts:(id)arg1 withChatroomUsername:(id)arg2;
- (void)initVoipCheckAudioDeviceObj;
- (void)_joinMultiTalkWithGroup:(id)arg1 roomId:(unsigned long long)arg2 roomKey:(unsigned long long)arg3;
- (void)joinMultiTalkWithGroup:(id)arg1 roomId:(unsigned long long)arg2 roomKey:(unsigned long long)arg3;
- (void)resubscribeLargeVideo;
- (_Bool)isUserSharingScreenWithUserMemberID:(int)arg1;
- (int)getMemberIdByUserName:(id)arg1;
- (void)checkAndCancelSubscribeLargeSharedScreenDataWithGroupInfo:(id)arg1;
- (void)checkAndResubscribeLargeSharedScreenDataWithUserName:(id)arg1;
- (void)subscribeLargeVideoForUser:(id)arg1 isSharedScreenData:(_Bool)arg2 isCancel:(_Bool)arg3;
- (int)engineDoMemberSelectForView:(id)arg1;
- (id)getMemberQualityInfoList:(id)arg1;
- (id)getTalkIngMember:(id)arg1;
- (id)getRenderForUsername:(id)arg1;
- (_Bool)isUsingEarDevice;
@property(readonly, nonatomic) _Bool isSpeakerSupported;
- (id)getRenderForMemberId:(unsigned int)arg1;
- (_Bool)isPhoneCalling;
- (_Bool)isMultiTalkValidWithWxGroupId:(id)arg1;
- (_Bool)isOutOfDate:(unsigned int)arg1;
- (_Bool)isMultiTalkConnected;
- (_Bool)isMultiTalkCalling;
- (_Bool)isMultiTalkLocalCameraActive;
- (_Bool)isMultiTalkActive;
- (_Bool)canStartANewCall;
- (void)uploadFpsCountCheck;
- (void)stopVideoDevice;
- (void)startVideoDevice;
- (void)resetVideoDevice;
- (void)clearVideoDevice;
- (unsigned int)getNextEnableTimeForCreateRoom;
- (id)genMultiTalkClientGroupId;
- (void)onServiceInit;
- (void)dealloc;
- (id)init;
- (void)updateMemberInfosByGroupInfo:(id)arg1;
- (void)broadcastInfoToSpecifyMemberIDs:(id)arg1;
- (void)broadcastCmdMsgData:(id)arg1 toSpecifyMemberIDs:(id)arg2;
- (void)clearResumeAfterInterruptionBlock;
- (void)showCalleeRiskAlertWithUserNames:(id)arg1 isAll:(_Bool)arg2 isCreating:(_Bool)arg3;
- (void)minimize;
- (void)close;
- (void)queryTalkingMembersContinually;
- (void)cancelQueryingTalkingMembers;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
// Preceding property had unknown attributes: ?
// Original attribute string: T@"NSString",?,R,C

@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

